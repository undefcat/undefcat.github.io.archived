{"version":3,"sources":["AppContext.js","components/screen/Block.js","components/screen/Blocks.js","components/screen/Wall.js","common/useAppContext.js","components/screen/index.js","components/option-panel/color-picker/index.js","components/option-panel/mini-map/Block.js","components/option-panel/mini-map/Blocks.js","components/option-panel/mini-map/Walls.js","components/option-panel/mini-map/index.js","components/option-panel/buttons/ResetButton.js","components/option-panel/buttons/index.js","components/option-panel/index.js","App.js","index.js"],"names":["generateBlocks","blocks","block","Array","fill","map","r","g","b","a","generateBlock","createDefaultWalls","createContext","walls","trigger","resetWall","Block","backgroundColor","className","style","Blocks","screenBlocks","idx","Wall","id","useAppContext","useContext","AppContext","Screen","presetColors","ColorPicker","color","onChange","wallId","blocksId","handleMouseEnter","useCallback","e","buttons","handleMouseDown","onMouseEnter","onMouseDown","Walls","MiniMap","ctx","key","push","ResetButton","onClick","window","confirm","Buttons","OptionPanel","onChangeColor","visible","createUpdateBlock","target","App","useState","setWalls","showConfig","setShowConfig","setColor","fillType","setFillType","fillDefault","blockId","newBlocks","c","splice","code","useEffect","handler","prev","addEventListener","preventDefault","returnValue","removeEventListener","useShowConfigPanelEffect","keyDownHandler","keyUpHandler","useSetFillTypeEffect","provideValue","hasOwnProperty","Error","clicked","find","_","updated","fillRow","newWalls","fillColumn","Provider","value","rgb","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8373cb4f.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nconst generateBlock = block => new Array(block)\n  .fill(0)\n  .map(() => ({ r: 255, g: 255, b: 255, a: 0, fill: false }))\n\nconst generateBlocks = (blocks, block) => new Array(blocks)\n  .fill(0)\n  .map(() => generateBlock(block))\n\nexport const createDefaultWalls = () => ({\n  'left-wall': generateBlocks(8, 13),\n  'center-wall': generateBlocks(8, 23),\n  'right-wall': generateBlocks(8, 12),\n})\n\nexport default createContext({\n  walls: createDefaultWalls(),\n  trigger: () => {},\n  resetWall: () => {},\n})","function Block({ block }) {\n  const {r, g, b, a} = block\n\n  const backgroundColor = `rgba(${r}, ${g}, ${b}, ${a})`\n\n  return (\n    <div className=\"block\">\n      <div className=\"block-overlay\" style={{backgroundColor}} />\n      <div className=\"block-image\" />\n    </div>\n  )\n}\n\nexport default Block","import Block from './Block'\n\nfunction Blocks({ blocks }) {\n  const screenBlocks = blocks.map((block, idx) => (\n    <Block key={idx} block={block} />\n  ))\n\n  return (\n    <div className=\"blocks\">{screenBlocks}</div>\n  )\n}\n\nexport default Blocks","import Blocks from './Blocks'\n\nfunction Wall({ id, blocks }) {\n  const screenBlocks = blocks.map((blocks, idx) => (\n    <Blocks key={idx} blocks={blocks} />\n  ))\n\n  return (\n    <div className=\"wall-wrapper\" id={id}>\n      {screenBlocks}\n    </div>\n  )\n}\n\nexport default Wall","import { useContext } from 'react'\nimport AppContext from '../AppContext'\n\nexport const useAppContext = () => useContext(AppContext)","import Wall from './Wall'\nimport { useAppContext } from '../../common/useAppContext'\n\nfunction Screen() {\n  const { walls } = useAppContext()\n\n  return (\n    <div id=\"wrap\">\n      <div className=\"background\" id=\"ground\" />\n      <div id=\"walls\">\n        <Wall id=\"center-wall\" blocks={walls['center-wall']} />\n        <Wall id=\"left-wall\" blocks={walls['left-wall']} />\n        <Wall id=\"right-wall\" blocks={walls['right-wall']} />\n      </div>\n\n      <div className=\"background\" id=\"pillars\" />\n    </div>\n  )\n}\n\nexport default Screen","import { SketchPicker } from 'react-color'\n\nconst presetColors = [\n  '#D0021B80',\n  '#F5A62380',\n  '#F8E71C80',\n  '#8B572A80',\n  '#7ED32180',\n  '#41750580',\n  '#BD10E080',\n  '#9013FE80',\n  '#4A90E280',\n  '#50E3C280',\n  '#B8E98680',\n  '#00000080',\n  '#4A4A4A80',\n  '#9B9B9B80',\n  '#FFFFFF80',\n]\n\nfunction ColorPicker({ color, onChange }) {\n  return (\n    <section>\n      <SketchPicker\n        color={color}\n        onChange={onChange}\n        presetColors={presetColors}\n      />\n    </section>\n  )\n}\n\nexport default ColorPicker","import { useCallback } from 'react'\n\nfunction Block({ wallId, blocksId, id, color, trigger }) {\n  const {r, g, b, a} = color\n\n  const backgroundColor = `rgba(${r},${g},${b},${a})`\n\n  const handleMouseEnter = useCallback(e => {\n    if (e.buttons !== 1) {\n      return\n    }\n\n    trigger(wallId, blocksId, id)\n  }, [wallId, blocksId, id, trigger])\n\n  const handleMouseDown = useCallback(() => {\n    trigger(wallId, blocksId, id)\n  }, [wallId, blocksId, id, trigger])\n\n  return (\n    <div\n      className=\"mini-map-block\"\n      style={{backgroundColor}}\n      onMouseEnter={handleMouseEnter}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n\nexport default Block","import Block from './Block'\nimport { useAppContext } from '../../../common/useAppContext'\n\nfunction Blocks({ wallId, blocksId, blocks }) {\n  const { trigger } = useAppContext()\n\n  const b = blocks.map((color, idx) => (\n    <Block\n      key={idx}\n      wallId={wallId}\n      blocksId={blocksId}\n      id={idx}\n      color={color}\n      trigger={trigger}\n    />\n  ))\n\n  return (\n    <div className=\"mini-map-blocks\">{b}</div>\n  )\n}\n\nexport default Blocks","import Blocks from './Blocks'\n\nfunction Walls({ id, blocks }) {\n  const b = blocks.map((blocks, idx) => (\n    <Blocks\n      key={idx}\n      wallId={id}\n      blocksId={idx}\n      blocks={blocks}\n    />\n  ))\n\n  return (\n    <div className=\"mini-map-walls\">{b}</div>\n  )\n}\n\nexport default Walls","import Walls from './Walls'\nimport { useAppContext } from '../../../common/useAppContext'\nimport './index.css'\n\nfunction MiniMap() {\n  const ctx = useAppContext()\n  const walls = []\n\n  for (const key in ctx.walls) {\n    walls.push(<Walls key={key} id={key} blocks={ctx.walls[key]} />)\n  }\n\n  return (\n    <section>{walls}</section>\n  )\n}\n\nexport default MiniMap\n","import { useAppContext } from '../../../common/useAppContext'\n\nfunction ResetButton() {\n  const { resetWall } = useAppContext()\n\n  const handleOnClick = () => {\n    const ok = window.confirm('현재 벽에 적용된 색상을 초기화 하시겠어요?')\n    if (!ok) {\n      return\n    }\n\n    resetWall()\n  }\n\n  return (\n    <button onClick={handleOnClick}>칠해진 벽 색상 초기화</button>\n  )\n}\n\nexport default ResetButton","import ResetButton from './ResetButton'\n\nfunction Buttons() {\n  return (\n    <section>\n      <ResetButton />\n    </section>\n  )\n}\n\nexport default Buttons","import ColorPicker from './color-picker'\nimport MiniMap from './mini-map'\nimport Buttons from './buttons'\nimport './index.css'\n\nfunction OptionPanel({ color, onChangeColor, visible }) {\n  return (\n    <div className={visible ? '' : 'hide'} id=\"option\">\n      <MiniMap />\n      <ColorPicker\n        color={color}\n        onChange={onChangeColor}\n      />\n      <Buttons />\n    </div>\n  )\n}\n\nexport default OptionPanel","import { useEffect, useState } from 'react'\nimport './App.css'\nimport AppContext, { createDefaultWalls } from './AppContext'\nimport Screen from './components/screen'\nimport OptionPanel from './components/option-panel'\n\nconst FILL_TYPE_DEFAULT = 0\nconst FILL_TYPE_ROW = 1\nconst FILL_TYPE_COLUMN = 2\n\nconst isSameColor = (a, b) => a.r === b.r\n  && a.g === b.g\n  && a.b === b.b\n  && a.a === b.a\n\nconst createUpdateBlock = (target, color) => {\n  // 색깔이 채워져 있지 않은 상태면 채운다\n  if (!target.fill) {\n    return { ...color, fill: true }\n  }\n\n  // 색깔이 채워져 있는 경우\n  // 같은 색인지 확인하고\n  // 같은 색이면 색깔을 지운다\n  if (isSameColor(target, color)) {\n    return { ...target, a: 0, fill: false }\n  }\n\n  // 이전과 다른 색이면 색깔 바꾼다.\n  return { ...color, fill: true }\n}\n\nconst useShowConfigPanelEffect = (setShowConfig, code = 'KeyQ') => useEffect(() => {\n  const handler = e => {\n    if (e.code !== code) {\n      return\n    }\n\n    setShowConfig(prev => !prev)\n  }\n\n  window.addEventListener('keydown', handler)\n  window.addEventListener('beforeunload', e => {\n    e.preventDefault()\n\n    e.returnValue = ''\n  })\n\n  return () => {\n    window.removeEventListener('keydown', handler)\n  }\n}, [setShowConfig])\n\nconst useSetFillTypeEffect = setFillType => useEffect(() => {\n  const keyDownHandler = e => {\n    switch (e.key) {\n      case 'Shift':\n        setFillType(FILL_TYPE_ROW)\n        return\n\n      case 'Alt':\n        setFillType(FILL_TYPE_COLUMN)\n        return\n\n      default:\n        setFillType(FILL_TYPE_DEFAULT)\n    }\n  }\n\n  const keyUpHandler = () => {\n    setFillType(FILL_TYPE_DEFAULT)\n  }\n\n  window.addEventListener('keydown', keyDownHandler)\n  window.addEventListener('keyup', keyUpHandler)\n\n  return () => {\n    window.removeEventListener('keydown', keyDownHandler)\n    window.removeEventListener('keyup', keyUpHandler)\n  }\n}, [setFillType])\n\nfunction App() {\n  const [walls, setWalls] = useState(createDefaultWalls())\n  const [showConfig, setShowConfig] = useState(false)\n  const [color, setColor] = useState({\n    r: 0, g: 0, b: 0, a: .5,\n  })\n  const [fillType, setFillType] = useState(FILL_TYPE_DEFAULT)\n\n  const handleChangeColor = color => {\n    setColor(color.rgb)\n  }\n\n  const fillDefault = (wallId, blocksId, blockId) => {\n    const blocks = walls[wallId]\n    const newBlocks = blocks[blocksId].map((c, idx) => {\n      if (idx !== blockId) {\n        return c\n      }\n\n      return createUpdateBlock(c, color);\n    })\n\n    blocks.splice(blocksId, 1, newBlocks)\n\n    setWalls({...walls})\n  }\n\n  const fillRow = (wallId, blocksId, blockId) => {\n    const blocks = walls[wallId]\n    const clicked = blocks[blocksId].find((_, idx) => idx === blockId)\n    const updated = createUpdateBlock(clicked, color)\n\n    const newBlocks = blocks[blocksId]\n      .map(() => ({ ...updated }));\n\n    blocks.splice(blocksId, 1, newBlocks)\n\n    setWalls({...walls})\n  }\n\n  const fillColumn = (wallId, blocksId, blockId) => {\n    const blocks = walls[wallId]\n    const clicked = blocks[blocksId].find((_, idx) => idx === blockId)\n    const updated = createUpdateBlock(clicked, color)\n\n    const newBlocks = blocks\n      .map(b => b.map((block, idx) => {\n        if (idx !== blockId) {\n          return block\n        }\n\n        return { ...updated }\n      }))\n\n    const newWalls = { ...walls }\n    newWalls[wallId] = newBlocks\n\n    setWalls(newWalls)\n  }\n\n  const trigger = (wallId, blocksId, blockId) => {\n    if (!walls.hasOwnProperty(wallId)) {\n      throw new Error(`${wallId} 값이 존재하지 않습니다.`)\n    }\n\n    switch (fillType) {\n      case FILL_TYPE_DEFAULT:\n        fillDefault(wallId, blocksId, blockId)\n        return\n\n      case FILL_TYPE_ROW:\n        fillRow(wallId, blocksId, blockId)\n        return\n\n      case FILL_TYPE_COLUMN:\n        fillColumn(wallId, blocksId, blockId)\n        return\n\n      default:\n        fillDefault(wallId, blocksId, blockId)\n    }\n  }\n\n  const resetWall = () => {\n    setWalls(createDefaultWalls())\n  }\n\n  useShowConfigPanelEffect(setShowConfig, 'KeyQ')\n  useSetFillTypeEffect(setFillType)\n\n  const provideValue = {\n    walls,\n    trigger,\n    resetWall,\n  }\n\n  return (\n    <AppContext.Provider value={provideValue}>\n      <Screen\n        color={color}\n      />\n      <OptionPanel\n        color={color}\n        onChangeColor={handleChangeColor}\n        visible={showConfig}\n      />\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}